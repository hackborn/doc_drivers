package sqlitegendriver

// autogenerated with github.com/hackborn/doc_drivers on 2024-05-20
// do not modify

const (
	genKeysVar        = "$KEYS$"
	genKeyValuesVar   = "$KEYVALUES$"
	genFieldsVar      = "$FIELDS$"
	genTableVar       = "$TABLE$"
	genValuesVar      = "$VALUES$"
	genFieldValuesVar = "$FIELDVALUES$"

	genAndKeyword      = "AND"
	genAndKeywordWS    = " AND "
	genEqualsKeyword   = "="
	genEqualsKeywordWS = " = "

	genQuoteSz = string(rune('\''))

	genSetSql = `INSERT INTO $TABLE$ ($FIELDS$) VALUES($VALUES$) ON CONFLICT($KEYS$) DO UPDATE SET $FIELDVALUES$;`
	genDelSql = `DELETE FROM $TABLE$ WHERE ($KEYVALUES$);`
)

var (
	genTableDefs = map[string]genSqlTableDef{
		`UiSetting`: {
			cols: []genSqlTableCol{
				{`name`, `VARCHAR(255)`, ``},
				{`value`, `TEXT`, `json`},
			},
			create: `DROP TABLE IF EXISTS gensettings;
CREATE TABLE IF NOT EXISTS gensettings (
	name VARCHAR(255) NOT NULL,
	value TEXT,
	PRIMARY KEY (name)
);
`,
		}, `Company`: {
			cols: []genSqlTableCol{
				{`id`, `VARCHAR(255)`, ``},
				{`name`, `VARCHAR(255)`, ``},
				{`val`, `INTEGER`, ``},
				{`fy`, `INTEGER`, ``},
			},
			create: `DROP TABLE IF EXISTS gencompany;
CREATE TABLE IF NOT EXISTS gencompany (
	id VARCHAR(255) NOT NULL,
	name VARCHAR(255),
	val INTEGER,
	fy INTEGER,
	PRIMARY KEY (id)
);
CREATE INDEX IF NOT EXISTS b ON gencompany (name);
CREATE INDEX IF NOT EXISTS c ON gencompany (fy);
`,
		}, `Events`: {
			cols: []genSqlTableCol{
				{`time`, `INTEGER`, ``},
				{`name`, `VARCHAR(255)`, ``},
				{`value`, `VARCHAR(255)`, ``},
			},
			create: `DROP TABLE IF EXISTS genevents;
CREATE TABLE IF NOT EXISTS genevents (
	time INTEGER NOT NULL,
	name VARCHAR(255),
	value VARCHAR(255),
	PRIMARY KEY (time)
);
`,
		}, `Filing`: {
			cols: []genSqlTableCol{
				{`ticker`, `VARCHAR(255)`, ``},
				{`end`, `VARCHAR(255)`, ``},
				{`form`, `VARCHAR(255)`, ``},
				{`val`, `INTEGER`, ``},
				{`units`, `VARCHAR(255)`, ``},
				{`fy`, `INTEGER`, ``},
			},
			create: `DROP TABLE IF EXISTS genfiling;
CREATE TABLE IF NOT EXISTS genfiling (
	ticker VARCHAR(255) NOT NULL,
	end VARCHAR(255) NOT NULL,
	form VARCHAR(255) NOT NULL,
	val INTEGER,
	units VARCHAR(255),
	fy INTEGER,
	PRIMARY KEY (ticker,end,form)
);
`,
		}, `CollectionSetting`: {
			cols: []genSqlTableCol{
				{`name`, `VARCHAR(255)`, ``},
				{`value`, `TEXT`, `json`},
			},
			create: `DROP TABLE IF EXISTS gensettings;
CREATE TABLE IF NOT EXISTS gensettings (
	name VARCHAR(255) NOT NULL,
	value TEXT,
	PRIMARY KEY (name)
);
`,
		},
	}

	genMetadatas = map[string]*genMetadata{
		`Company`: &genMetadata{
			table:  "gencompany",
			tags:   []string{"id", "name", "val", "fy"},
			fields: []string{"Id", "Name", "Value", "FoundedYear"},
			keys: map[string]*genKeyMetadata{
				"": &genKeyMetadata{
					tags:   []string{"id"},
					fields: []string{"Id"},
				},
				"b": &genKeyMetadata{
					tags:   []string{"name"},
					fields: []string{"Name"},
				},
				"c": &genKeyMetadata{
					tags:   []string{"fy"},
					fields: []string{"FoundedYear"},
				},
			},
		}, `Events`: &genMetadata{
			table:  "genevents",
			tags:   []string{"time", "name", "value"},
			fields: []string{"Time", "Name", "Value"},
			keys: map[string]*genKeyMetadata{
				"": &genKeyMetadata{
					tags:   []string{"time"},
					fields: []string{"Time"},
				},
			},
		}, `Filing`: &genMetadata{
			table:  "genfiling",
			tags:   []string{"ticker", "end", "form", "val", "units", "fy"},
			fields: []string{"Ticker", "EndDate", "Form", "Value", "Units", "FiscalYear"},
			keys: map[string]*genKeyMetadata{
				"": &genKeyMetadata{
					tags:   []string{"ticker", "end", "form"},
					fields: []string{"Ticker", "EndDate", "Form"},
				},
			},
		}, `CollectionSetting`: &genMetadata{
			table:  "gensettings",
			tags:   []string{"name", "value"},
			fields: []string{"Name", "Value"},
			keys: map[string]*genKeyMetadata{
				"": &genKeyMetadata{
					tags:   []string{"name"},
					fields: []string{"Name"},
				},
			},
		}, `UiSetting`: &genMetadata{
			table:  "gensettings",
			tags:   []string{"name", "value"},
			fields: []string{"Name", "Value"},
			keys: map[string]*genKeyMetadata{
				"": &genKeyMetadata{
					tags:   []string{"name"},
					fields: []string{"Name"},
				},
			},
		},
	}
)
